(defun get-node-list (tree)
	(if (atom tree) (return-from get-node-list '()) (let ((array '()) (r '()))
				(loop for child in (rest tree) do
					(setf r (get-node-list child))
					(if r (setf array (append array r))))
				(push tree array)
				(return-from get-node-list array))))	

(defun count-elem (tree)
  (if (atom tree)
      1
      (1+ (loop for child in (rest tree)
                summing (count-elem child)))))

(defun count-nodes (tree)
  (if (atom tree)
      0
      (1+ (loop for child in (rest tree)
                summing (count-nodes child)))))

(defun count-leafs (tree)
  (if (atom tree)
      1
      (loop for child in (rest tree)
                summing (count-leafs child))))

(defun change-node-at (x index value)
  (let ((n -1))
    (labels ((traverse (node)
               (unless (atom node)
                 (incf n)
                 (when (= n index)
                   (return-from traverse value)))
               (if (atom node)
                   node
                   (cons (first node)
                         (mapcar #'traverse (rest node))))))
      (let ((new-tree (traverse x)))
        (when (< n index)
          (error "Index ~S out of bounds in tree ~S." index x))
        new-tree))))

(defun change-leaf-at (x index value)
  (let ((n -1))
    (labels ((traverse (node)
               (when (atom node)
                 (incf n)
                 (when (= n index)
                   (return-from traverse value)))
               (if (atom node)
                   node
                   (cons (first node)
                         (mapcar #'traverse (rest node))))))
      (let ((new-tree (traverse x)))
        (when (< n index)
          (error "Index ~S out of bounds in tree ~S." index x))
        new-tree))))

(defun node-at (x index)
  (let ((n index))
    (labels ((traverse (node)
               (unless (atom node)
                 (when (zerop n)
                   (return-from node-at node))
                 (decf n))
               (when (listp node)
                 (mapc #'traverse (rest node)))))
      (traverse x)))
  (error "Index ~S out of bounds in tree ~S." index x))

(defun leaf-at (x index)
  (let ((n index))
    (labels ((traverse (node)
               (when (atom node)
                 (when (zerop n)
                   (return-from leaf-at node))
                 (decf n))
               (when (listp node)
                 (mapc #'traverse (rest node)))))
      (traverse x)))
  (error "Index ~S out of bounds in tree ~S." index x))

